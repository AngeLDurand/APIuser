# Asegúrate de que esta base de datos exista en tu servidor MySQL.
spring.datasource.url=jdbc:mysql://localhost:3306/prueba

# Nombre de usuario para la conexión a la base de datos MySQL
spring.datasource.username=root

# Contraseña para la conexión a la base de datos MySQL
spring.datasource.password=Rayita99?#*

# Nombre del driver JDBC. Spring Boot es bastante bueno infiriéndolo
# gracias a la dependencia mysql-connector-j, pero especificarlo no hace daño.
# Para mysql-connector-j (versiones recientes) es com.mysql.cj.jdbc.Driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===============================
# CONFIGURACIÓN DE JPA/HIBERNATE
# ===============================

# Define cómo Hibernate maneja el esquema de la base de datos (DDL - Data Definition Language).
# Opciones comunes:
#   validate: Valida el esquema, no hace cambios a la base de datos.
#   update: Actualiza el esquema si es necesario (¡cuidado en producción!).
#   create: Crea el esquema cada vez, borrando los datos previos.
#   create-drop: Crea el esquema al iniciar y lo borra al finalizar (útil para tests).
#   none: No hace nada con el esquema (recomendado para producción si gestionas el esquema manualmente o con herramientas como Flyway/Liquibase).
# Para desarrollo, 'update' o 'create' pueden ser convenientes. Para tu evaluación, 'update' o 'create' podría estar bien.
spring.jpa.hibernate.ddl-auto=create

# Muestra las sentencias SQL generadas por Hibernate en la consola.
# Muy útil para depuración y entender qué está haciendo Hibernate.
spring.jpa.show-sql=true

# (Opcional) Formatea el SQL mostrado para que sea más legible.
spring.jpa.properties.hibernate.format_sql=true
